[tool.poetry]
name = "pyproject-toml"
version = "0.1.0"
description = "Checkbox"
authors = ["Sergey Polischuk <polischuk0107@gmail.com>"]
readme = "README.md"
packages = [{include = "pyproject"}]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.0"
uvicorn = {extras = ["standard"], version = "^0.29.0"}
sqlalchemy = "^2.0.29"
psycopg2-binary = "^2.9.9"
psycopg = {extras = ["binary"], version = "^3.1.13"}
pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
sqlmodel = "^0.0.16"
bcrypt = "4.0.1"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
mypy = "^1.8.0"
ruff = "^0.4.5"
pre-commit = "^3.6.2"
types-python-jose = "^3.3.4.20240106"
types-passlib = "^1.7.7.20240106"
coverage = "^7.4.3"
pytest-asyncio = "^0.15.1"
factory_boy = "^3.2.0"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in
    "ARG001", # Unused function argument
    "ARG002", # Unused method argument
    "ARG004", # Unused static method argument
    "CPY001", # Missing copyright notice at top of file
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "E203", # Whitespace before ':'
    "EXE002", # The file is executable but no shebang is present
    "FIX002", # Line contains
    "N806", # Variable in function should be lowercase
    "PLC0415", # `import` should be at the top-level of a file
    "PLC1901", # `record['bio'] == ''` can be simplified to `not record['bio']` as an empty string is falsey
    "PLR0904", # Too many public methods
    "PLR0916", # Too many Boolean expressions
    "PLR6301", # Method could be a function, class method, or static method
    "S101", # Use of `assert` detected
    "TD002", # Missing author in
    "TD003", # Missing issue link on the line following this
    # Ruff format recommend disable trid rule
    "COM812", # Trailing comma missing
    "COM819", # Checks for the presence of prohibited trailing commas
    "D206", # Docstring should be indented with spaces, not tabs
    "D300", # Use """triple double quotes"""
    "E111", # Indentation is not a multiple of four
    "E114", # Indentation is not a multiple of four (comment)
    "E117", # Over-indented
    "ISC001", # Conflict with ruff format | Checks for implicitly concatenated strings on a single line.
    "ISC002", # Checks for implicitly concatenated strings across multiple lines.
    "Q000", # Conflict with ruff format | Remove bad quotes
    "Q001", # Checks for multiline strings that use single quotes or double quotes
    "Q002", # Checks for docstrings that use single quotes or double quotes
    "Q003", # Conflict with ruff format | Change outer quotes to avoid escaping inner quotes
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true